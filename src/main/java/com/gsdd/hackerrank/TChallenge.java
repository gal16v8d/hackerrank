package com.gsdd.hackerrank;

import java.util.stream.IntStream;

/*
 * @author Alexander Galvis
 * 
 * Look-and-Say Sequence
 * 
 * Find the n’th term in Look-and-say (Or Count and Say) Sequence. The
 * look-and-say sequence is the sequence of the below integers: 1, 11, 21, 1211,
 * 111221, 312211, 13112221, 1113213211, …
 * 
 * The first term is "1" Second term is "11", generated by reading first term as
 * "One 1" (There is one 1 in previous term) Third term is "21", generated by
 * reading second term as "Two 1" Fourth term is "1211", g Fourth term is
 * "1211", generated by reading third term as "One 2 One 1" and so on
 * 
 * How to find n’th term? Example:
 * 
 * Input: n = 3 Output: 21 Input: n = 5 Output: 111221
 */
public class TChallenge {

  public String countAndSay(int input) {
    return switch (input) {
      case 1 -> "1";
      case 2 -> "11";
      default -> {
        String tempPrevious = countAndSay(input - 1);
        yield countSequence(tempPrevious);
      }
    };
  }

  private String countSequence(String input) {
    StringBuilder builder = new StringBuilder();
    String[] elements = input.split("");
    int count = 1;
    for (int i = 0; i < elements.length; i++) {
      String currentElement = elements[i];
      if (i + 1 > elements.length - 1) {
        builder.append(count).append(elements[i]);
        count = 1;
      } else {
        if (currentElement.equals(elements[i + 1])) {
          count++;
        } else {
          builder.append(count).append(elements[i]);
          count = 1;
        }
      }
    }
    return builder.toString();
  }

  public static void main(String[] args) {
    TChallenge tc = new TChallenge();
    IntStream.rangeClosed(1, 8)
        .forEach(
            value -> System.out
                .println("Input n=%s Output=%s".formatted(value, tc.countAndSay(value))));
  }


}
